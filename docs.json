[{"name":"CodeOrganization.ManipulationFunctionsLiveWithTheirType","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports violations of the following rule:\n\nWhen a function uses some concrete type both as an input and an output,\nboth it and that type should be defined in the same module.\n\n    config =\n        [ CodeOrganization.ManipulationFunctionsLiveWithTheirType.rule\n        ]\n\n\n## Fail\n\n    module Model exposing (Model)\n\n    type alias Model = { ... }\n\n\n    module Update exposing (update)\n    import Model\n\n    update : Msg -> Model -> (Model Cmd Msg)\"\n    update _ model = model\n\n\n## Success\n\n    module Main exposing (main)\n\n    type alias Model = { ... }\n\n    update : Msg -> Model -> (Model Cmd Msg)\"\n    update _ model = model\n\n\n## When (not) to enable this rule\n\nThis rule is currently experimental.\nIt remains to be determined whether this is a good rule to generally enforce, or whether it is too strict.\n\nPlease report your experience at <https://github.com/avh4-experimental/elm-review-module-organization/issues>\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template avh4-experimental/elm-review-module-organization/example --rules CodeOrganization.ManipulationFunctionsLiveWithTheirType\n```\n\n\n## Notes\n\n**Manipulation functions live with their type**: any functions that use some concrete type both as an input and an output should be defined in the same module the type itself is defined in (forces Model and update to be together)\n\n    update : x -> Model -> Model\n    update : x -> Model -> ( Model, c )\n    update : x -> ( Model, config ) -> { newModel : Model, effect : e, event : Maybe ev }\n\n    f : Result Model g -> Maybe ( Model, String )\n\n","type":"Review.Rule.Rule"}],"binops":[]}]